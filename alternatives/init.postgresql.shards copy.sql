CREATE UNLOGGED TABLE clientes (
	id SERIAL,
	current_balance INTEGER NOT NULL DEFAULT 0,
    shard INTEGER NOT NULL DEFAULT 0,
     PRIMARY KEY (id, shard)
);
    
CREATE UNLOGGED TABLE transactions (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	cliente_id INTEGER NOT NULL,
	amount INTEGER NOT NULL,
	kind CHAR(1) NOT NULL,
	description VARCHAR(10) NOT NULL,
	submitted_at TIMESTAMP(6) NOT NULL
);

CREATE INDEX idx_submitted_at ON transactions (submitted_at);


INSERT INTO clientes(id, current_balance, shard) VALUES 
    (1,0,0), (2,0,0), (3,0,0), (4,0,0), (5,0,0),
    (1,0,1), (2,0,1), (3,0,1), (4,0,1), (5,0,1);

CREATE EXTENSION IF NOT EXISTS pg_prewarm;
SELECT pg_prewarm('clientes');
SELECT pg_prewarm('transactions');


CREATE OR REPLACE FUNCTION limit_cliente(p_cliente_id INTEGER)
RETURNS INTEGER AS $$
BEGIN
    RETURN CASE p_cliente_id
        WHEN 1 THEN 100000
        WHEN 2 THEN 80000
        WHEN 3 THEN 1000000
        WHEN 4 THEN 10000000
        WHEN 5 THEN 500000
        ELSE -1
    END;
END;
$$ LANGUAGE plpgsql;

CREATE TYPE json_result AS (
  status_code INT,
  body json
);

CREATE OR REPLACE FUNCTION proc_transacao(p_shard INT, p_cliente_id INT, p_amount INT, p_kind CHAR, p_description CHAR(10))
RETURNS json_result as $$
DECLARE
    diff INT;
    v_current_balance INT;
    v_limit INT;
    v_sum INT;
    result json_result;
BEGIN
    SELECT limit_cliente(p_cliente_id) INTO v_limit;

    -- m_shard := p_amount % 10
    
    SELECT current_balance
        INTO v_current_balance
        FROM clientes
        WHERE 
            id = p_cliente_id
        AND shard = p_shard
        FOR UPDATE;

    SELECT SUM(current_balance)
        INTO v_sum
        FROM clientes
        WHERE id = p_cliente_id;

    IF p_kind = 'd' THEN
        diff := p_amount * -1;            
        IF (v_sum + diff) < (-1 * v_limit) THEN
            result.body := 'LIMITE_INDISPONIVEL';
            result.status_code := 422;
            RETURN result;
        END IF;
    ELSE
        diff := p_amount;
    END IF;

    
    INSERT INTO transactions 
                     (cliente_id,   amount,   kind,   description,      submitted_at)
            VALUES (p_cliente_id, p_amount, p_kind, p_description, now());

    UPDATE clientes 
        SET current_balance = current_balance + diff 
        WHERE id = p_cliente_id
            AND shard = p_shard;

    SELECT json_build_object(
        'current_balance', v_sum + diff,
        'limit', v_limit
    ) into result.body;
    result.status_code := 200;
    RETURN result;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION proc_balance(p_cliente_id int)
RETURNS json_result AS $$
DECLARE
    result json_result;
    row_count integer;
    v_current_balance numeric;
    v_limit numeric;
BEGIN

    SELECT SUM(current_balance)
        INTO v_current_balance
        FROM clientes
        WHERE id = p_cliente_id;

    IF NOT FOUND THEN
            result.body := 'CLIENTE_NAO_ENCONTRADO';
            result.status_code := 404;
            RETURN result;
    END IF;

    SELECT limit_cliente(p_cliente_id) INTO v_limit;
    SELECT json_build_object(
        'current_balance', json_build_object(
            'total', v_current_balance,
            'date_balance', TO_CHAR(now(), 'YYYY-MM-DD HH:MI:SS.US'),
            'limit', v_limit
        ),
        'recent_transactions', COALESCE((
            SELECT json_agg(row_to_json(t)) FROM (
                SELECT amount, kind, description, TO_CHAR(submitted_at, 'YYYY-MM-DD HH:MI:SS.US') as submitted_at
                FROM transactions
                WHERE cliente_id = p_cliente_id
                ORDER BY submitted_at DESC
                LIMIT 10
            ) t
        ), '[]')
    ) INTO result.body;
    result.status_code := 200;
    RETURN result;
END;
$$ LANGUAGE plpgsql;
