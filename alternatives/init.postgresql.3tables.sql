CREATE UNLOGGED TABLE clientes (
	id SERIAL PRIMARY KEY,
	current_balance INTEGER NOT NULL DEFAULT 0
);
    
CREATE UNLOGGED TABLE transactions (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	cliente_id INTEGER NOT NULL,
	amount INTEGER NOT NULL,
	kind CHAR(1) NOT NULL,
	description VARCHAR(10) NOT NULL,
	submitted_at TIMESTAMP(6) NOT NULL);

CREATE UNLOGGED TABLE balances (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	cliente_id INTEGER NOT NULL,
	balance TEXT NOT NULL,
    submitted_at TIMESTAMP(6) NOT NULL DEFAULT NOW());


CREATE INDEX idx_cliente_id ON transactions (cliente_id);
CREATE INDEX idx_cliente_id_balances ON balances (cliente_id);


CREATE EXTENSION IF NOT EXISTS pg_prewarm;
SELECT pg_prewarm('clientes');
SELECT pg_prewarm('transactions');

CREATE TYPE json_result AS (
  status_code INT,
  body json
);

CREATE OR REPLACE FUNCTION proc_transacao(p_shard INT, p_cliente_id INT, p_amount INT, p_kind CHAR, p_description CHAR(10))
RETURNS json_result as $$
DECLARE
    diff INT;
    v_current_balance INT;
    n_current_balance INT;
    v_limit INT;
    result json_result;
    v_balance TEXT;
BEGIN
    PERFORM pg_advisory_xact_lock(p_cliente_id);
    v_limit := CASE p_cliente_id
        WHEN 1 THEN 100000
        WHEN 2 THEN 80000
        WHEN 3 THEN 1000000
        WHEN 4 THEN 10000000
        WHEN 5 THEN 500000
        ELSE -1 
    END;

    SELECT current_balance 
        INTO v_current_balance
        FROM clientes
        WHERE id = p_cliente_id
        FOR UPDATE;

    IF (p_kind = 'd') THEN
        IF (v_current_balance - p_amount) < (-1 * v_limit) THEN
            result.body := 'LIMITE_INDISPONIVEL';
            result.status_code := 422;
            RETURN result;
        ELSE
            n_current_balance := v_current_balance - p_amount;
        END IF;
    ELSE
        n_current_balance := v_current_balance + p_amount;
    END IF;
    
    INSERT INTO transactions 
                     (cliente_id,   amount,   kind,   description,      submitted_at)
            VALUES (p_cliente_id, p_amount, p_kind, p_description, now());

    
    SELECT json_build_object(
        'current_balance', json_build_object(
            'total', n_current_balance,
            'date_balance', TO_CHAR(now(), 'YYYY-MM-DD HH:MI:SS.US'),
            'limit', v_limit
        ),
        'recent_transactions', COALESCE((
            SELECT json_agg(row_to_json(t)) FROM (
                SELECT amount, kind, description
                FROM transactions
                WHERE cliente_id = p_cliente_id
                ORDER BY submitted_at DESC
                LIMIT 10
            ) t
        ), '[]')
    ) INTO v_balance;

    SELECT json_build_object(
        'current_balance', n_current_balance,
        'limit', v_limit
    ) into result.body;

    UPDATE clientes 
        SET 
            current_balance = n_current_balance
        WHERE id = p_cliente_id;

    INSERT INTO balances (cliente_id, balance) 
        VALUES (p_cliente_id, v_balance);
    result.status_code := 200;
    RETURN result;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION proc_balance(p_cliente_id int)
RETURNS json_result AS $$
DECLARE
    result json_result;
    row_count integer;
    v_current_balance numeric;
    v_limit numeric;
BEGIN
    PERFORM pg_advisory_xact_lock(p_cliente_id);
    SELECT balance
        INTO result.body 
        FROM balances
        WHERE id = p_cliente_id
        ORDER BY submitted_at DESC
        LIMIT 1;

    result.status_code := 200;
    RETURN result;
END;
$$ LANGUAGE plpgsql;


INSERT INTO clientes(id) VALUES 
    (1), (2), (3), (4), (5);

INSERT INTO balances(cliente_id, balance) VALUES 
    (1, '{"current_balance":{"total":0,"date_balance":"2000-01-01 00:00:01.00000","limit":100000},"recent_transactions":[]}'), 
    (2, '{"current_balance":{"total":0,"date_balance":"2000-01-01 00:00:01.00000","limit":80000},"recent_transactions":[]}'), 
    (3, '{"current_balance":{"total":0,"date_balance":"2000-01-01 00:00:01.00000","limit":1000000},"recent_transactions":[]}'), 
    (4, '{"current_balance":{"total":0,"date_balance":"2000-01-01 00:00:01.00000","limit":10000000},"recent_transactions":[]}'), 
    (5, '{"current_balance":{"total":0,"date_balance":"2000-01-01 00:00:01.00000","limit":500000},"recent_transactions":[]}');
